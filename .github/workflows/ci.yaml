# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

# This continuous integration pipeline is triggered anytime a user pushes code to the repo.
# This pipeline builds the Wpf project, runs unit tests, then saves the MSIX build artifact.
name: Onix WPF Destop App

# Trigger on every master branch push and pull request
on:
  push:
    branches:
      - main
      - develop
    tags: ['v*.*.*']

jobs:

  build:
    strategy:
      matrix:
        targetplatform: [x64]

    runs-on: windows-latest

    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      App_Packages_Directory: AppPackages
      SigningCertificate: GitHubActionsDemo.pfx
      Solution_Path: onix_client\OnixClientCenter\OnixClientCenter.sln
      TargetPlatform: "x64"

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    # Use Nerdbank.GitVersioning to set version variables: https://github.com/AArnott/nbgv
    - name: Use Nerdbank.GitVersioning to set version variables
      uses: aarnott/nbgv@v0.3
      id: nbgv
      with:
        setAllVars: true

    - name: Prepare-Version
      id: prepare
      shell: bash
      run: |
        GITHUB_REF=${{ steps.nbgv.outputs.BuildingRef }}
        GIT_HASH=${{ steps.nbgv.outputs.GitCommitIdShort }}

        DEPLOYMENT_BRANCH="dev"

        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          DEPLOYMENT_BRANCH=prod
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          VERSION=$BRANCH-$GIT_HASH
        fi

        echo ${VERSION} > onix_client/OnixClientCenter/bin/build.txt

        echo "ProgramVersion=${VERSION}" >> $GITHUB_OUTPUT
        echo "ProgramEnvironment=${DEPLOYMENT_BRANCH}" >> $GITHUB_OUTPUT

    - name: Slack notification start
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,ref,workflow # selectable (default: repo,message)
        text: "Start building [Onix-Win-Apps] [${{ steps.prepare.outputs.ProgramVersion }}]..."
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_URL }} # required
  
    # Install the .NET Core workload
    #- name: Install .NET Core
    #  uses: actions/setup-dotnet@v1
    #  with:
    #    dotnet-version: '8.0.x' # '6.0.x'

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    #- name: Setup MSBuild.exe
    #  uses: microsoft/setup-msbuild@v2

    #- name: Setup NuGet.exe
    #  uses: nuget/setup-nuget@v1
      
    #- run: nuget restore $env:Solution_Path

    # Restore the application
    #- name:  Restore the Wpf application to populate the obj folder
    #  run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
    #  env:
    #    Configuration: Debug
    #    RuntimeIdentifier: win-${{ matrix.targetplatform }}

    # Build the Windows Application Packaging project
    # /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration 
    #- name: Build the Windows Application Packaging Project
    #  run: msbuild $env:Solution_Path /p:AssemblyFileVersion=${{ steps.prepare.outputs.ProgramVersion }} /p:AssemblyVersion=${{ steps.prepare.outputs.ProgramVersion }} /p:UapAppxPackageBuildMode=$env:BuildMode /p:Configuration=$env:Configuration /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #  env:
    #    AppxBundle: Never
    #    BuildMode: SideloadOnly
    #    Configuration: Debug
    #    TargetPlatform: ${{ matrix.targetplatform }}

    # Use files from local build
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: OnixClientCenter-${{ matrix.targetplatform }}_${{ steps.prepare.outputs.ProgramVersion }}
        path: |
          onix_client\OnixClientCenter\bin\*.exe
          onix_client\OnixClientCenter\bin\*.dll
          onix_client\OnixClientCenter\bin\*.txt

    - name: Zip-Artifact
      id: zip-artifact
      shell: bash
      run: |
        CWD=$(pwd)
        cd onix_client/OnixClientCenter/bin/
        tar -czvf ${CWD}/OnixClientCenter-${{ matrix.targetplatform }}_${{ steps.prepare.outputs.ProgramVersion }}.gz *.exe *.dll *.txt
        cd ${CWD}
        ls -al

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCR_KEY }}'

    #- id: 'upload-file'
    #  uses: 'google-github-actions/upload-cloud-storage@v2'
    #  with:
    #    path: OnixClientCenter-${{ matrix.targetplatform }}_${{ steps.prepare.outputs.ProgramVersion }}.zip
    #    destination: 'public-software-download/onix/${{ steps.prepare.outputs.ProgramEnvironment }}'

    - name: Slack notification end
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,ref,workflow # selectable (default: repo,message)
        text: "Done building [Onix-Win-Apps] [${{ steps.prepare.outputs.ProgramVersion }}]"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_URL }} # required
